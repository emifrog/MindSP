{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///E:/GitHub/mindsp/apps/web/src/lib/db/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\n// Helper pour multi-tenancy\nexport function getTenantPrisma(tenantId: string) {\n  // Ici on pourrait implémenter une logique de routing par tenant\n  // Pour l'instant on utilise le même client avec filtrage\n  return prisma;\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6IAAY,CAAC;IACf,KAAK,uCAAyC;QAAC;QAAS;QAAS;KAAO,GAAG;AAC7E;AAEF,wCAA2C,gBAAgB,MAAM,GAAG;AAG7D,SAAS,gBAAgB,QAAgB;IAC9C,gEAAgE;IAChE,yDAAyD;IACzD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file:///E:/GitHub/mindsp/apps/web/src/lib/auth.ts"],"sourcesContent":["import NextAuth from 'next-auth';\nimport Credentials from 'next-auth/providers/credentials';\nimport { PrismaAdapter } from '@auth/prisma-adapter';\nimport { prisma } from '@/lib/db/prisma';\nimport * as bcrypt from 'bcryptjs';\nimport { z } from 'zod';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    Credentials({\n      name: 'credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email' },\n        password: { label: 'Password', type: 'password' },\n      },\n      async authorize(credentials) {\n        try {\n          const { email, password } = loginSchema.parse(credentials);\n\n          const user = await prisma.user.findUnique({\n            where: { email },\n            include: { tenant: true },\n          });\n\n          if (!user || !user.password) {\n            return null;\n          }\n\n          const isPasswordValid = await bcrypt.compare(password, user.password);\n\n          if (!isPasswordValid) {\n            return null;\n          }\n\n          return {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            role: user.role,\n            tenantId: user.tenantId,\n            tenant: user.tenant,\n          };\n        } catch (error) {\n          console.error('Auth error:', error);\n          return null;\n        }\n      },\n    }),\n  ],\n  session: {\n    strategy: 'jwt',\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n  pages: {\n    signIn: '/login',\n    error: '/login',\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n        token.role = user.role;\n        token.tenantId = user.tenantId;\n        token.tenant = user.tenant;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.id as string;\n        session.user.role = token.role as string;\n        session.user.tenantId = token.tenantId as string;\n        session.user.tenant = token.tenant as any;\n      }\n      return session;\n    },\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n});\n\nexport const { GET, POST } = handlers;\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;AAEA,MAAM,cAAc,qOAAC,CAAC,MAAM,CAAC;IAC3B,OAAO,qOAAC,CAAC,MAAM,GAAG,KAAK;IACvB,UAAU,qOAAC,CAAC,MAAM,GAAG,GAAG,CAAC;AAC3B;AAEO,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,IAAA,oRAAQ,EAAC;IAC1D,SAAS,IAAA,qRAAa,EAAC,qJAAM;IAC7B,WAAW;QACT,IAAA,mOAAW,EAAC;YACV,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI;oBACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,YAAY,KAAK,CAAC;oBAE9C,MAAM,OAAO,MAAM,qJAAM,CAAC,IAAI,CAAC,UAAU,CAAC;wBACxC,OAAO;4BAAE;wBAAM;wBACf,SAAS;4BAAE,QAAQ;wBAAK;oBAC1B;oBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;wBAC3B,OAAO;oBACT;oBAEA,MAAM,kBAAkB,MAAM,mMAAc,CAAC,UAAU,KAAK,QAAQ;oBAEpE,IAAI,CAAC,iBAAiB;wBACpB,OAAO;oBACT;oBAEA,OAAO;wBACL,IAAI,KAAK,EAAE;wBACX,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,IAAI;wBACf,MAAM,KAAK,IAAI;wBACf,UAAU,KAAK,QAAQ;wBACvB,QAAQ,KAAK,MAAM;oBACrB;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,eAAe;oBAC7B,OAAO;gBACT;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,OAAO;QACL,QAAQ;QACR,OAAO;IACT;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,IAAI,GAAG,KAAK,IAAI;gBACtB,MAAM,QAAQ,GAAG,KAAK,QAAQ;gBAC9B,MAAM,MAAM,GAAG,KAAK,MAAM;YAC5B;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAC9B,QAAQ,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ;gBACtC,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM,MAAM;YACpC;YACA,OAAO;QACT;IACF;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC;AAEO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG","debugId":null}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///E:/GitHub/mindsp/apps/web/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["// NextAuth API route placeholder\nexport { GET, POST } from '@/lib/auth';\n"],"names":[],"mappings":"AAAA,iCAAiC;;AACjC","debugId":null}}]
}